jobs:
  build_builder:
    needs:
      - "bump_version"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          fetch-depth: 22
          ref: "${{ needs.bump_version.outputs.commit_ref }}"
      - name: "Login to GHCR"
        uses: "docker/login-action@v2"
        with:
          password: "${{ secrets.GITHUB_TOKEN }}"
          registry: "ghcr.io"
          username: "${{ github.actor }}"
      - name: "If there were any changes to builder - build it and push to ghcr"
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -e "^builder/"; then
            ./builder/build.sh && ./builder/push.sh
          else
            echo "No changes to the builder found - refusing to rebuild"
          fi
  build_docker:
    needs:
      - "build_unix"
      - "bump_version"
      - "build_builder"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          ref: "${{ needs.bump_version.outputs.commit_ref }}"
      - name: "Pull artifacts"
        uses: "actions/download-artifact@v3"
        with:
          name: "packages"
          path: "./build/release/"
      - name: "Set up QEMU"
        uses: "docker/setup-qemu-action@v2"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v2"
        with:
          driver-opts: "image=moby/buildkit:v0.10.5"
          version: "latest"
      - name: "Login to Docker Registry"
        uses: "docker/login-action@v2"
        with:
          password: "${{ secrets.HNETUSER_DOCKERHUB_PASSWORD }}"
          registry: "docker.io"
          username: "${{ secrets.HNETUSER_DOCKERHUB_LOGIN }}"
      - name: "Login to GHCR"
        uses: "docker/login-action@v2"
        with:
          password: "${{ secrets.GITHUB_TOKEN }}"
          registry: "ghcr.io"
          username: "${{ github.actor }}"
      - name: "Prepare build"
        run: "./platforms/docker/build.sh ${{matrix.arch_alias}}"
      - name: "Build and push"
        uses: "docker/build-push-action@v3"
        with:
          context: "."
          file: "./platforms/docker/Dockerfile"
          platforms: "${{matrix.arch}}"
          push: true
          tags: "husarnet/husarnet-nightly:${{matrix.arch_alias}}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: "linux/amd64"
            arch_alias: "amd64"
          - arch: "linux/arm64/v8"
            arch_alias: "arm64"
          - arch: "linux/arm/v7"
            arch_alias: "armhf"
  build_macos_natively:
    needs:
      - "bump_version"
      - "build_builder"
    runs-on:
      - "self-hosted"
      - "macOS"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          ref: "${{ needs.bump_version.outputs.commit_ref }}"
      - name: "Build daemon natively on MacOS"
        run: "./daemon/build.sh unix macos_arm64"
      - name: "Build CLI natively on MacOS"
        run: "./cli/build.sh macos arm64"
      - name: "Push artifacts"
        uses: "actions/upload-artifact@v3"
        with:
          if-no-files-found: "error"
          name: "packages"
          path: "./build/release/*macos*"
  build_unix:
    needs:
      - "bump_version"
      - "build_builder"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          ref: "${{ needs.bump_version.outputs.commit_ref }}"
      - name: "Login to GHCR"
        uses: "docker/login-action@v2"
        with:
          password: "${{ secrets.GITHUB_TOKEN }}"
          registry: "ghcr.io"
          username: "${{ github.actor }}"
      - name: "Docker run ghcr.io/husarnet/husarnet:builder /app/platforms/unix/build.sh ${{matrix.arch}}"
        run: "docker run --rm --privileged --volume $(pwd):/app ghcr.io/husarnet/husarnet:builder /app/platforms/unix/build.sh ${{matrix.arch}}"
      - name: "Push artifacts"
        uses: "actions/upload-artifact@v3"
        with:
          if-no-files-found: "error"
          name: "packages"
          path: "./build/release/*${{matrix.arch}}*"
    strategy:
      fail-fast: false
      matrix:
        arch:
          - "amd64"
          - "i386"
          - "arm64"
          - "armhf"
          - "riscv64"
  build_windows:
    needs:
      - "bump_version"
      - "build_builder"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          ref: "${{ needs.bump_version.outputs.commit_ref }}"
      - name: "Login to GHCR"
        uses: "docker/login-action@v2"
        with:
          password: "${{ secrets.GITHUB_TOKEN }}"
          registry: "ghcr.io"
          username: "${{ github.actor }}"
      - name: "Docker run ghcr.io/husarnet/husarnet:builder /app/platforms/windows/build.sh"
        run: "docker run --rm --privileged --volume $(pwd):/app ghcr.io/husarnet/husarnet:builder /app/platforms/windows/build.sh"
      - name: "Push artifacts"
        uses: "actions/upload-artifact@v3"
        with:
          if-no-files-found: "error"
          name: "packages"
          path: "./build/release/*win64*"
  build_windows_installer:
    needs:
      - "build_windows"
      - "bump_version"
      - "build_builder"
    runs-on: "windows-2019"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          ref: "${{ needs.bump_version.outputs.commit_ref }}"
      - name: "Pull artifacts"
        uses: "actions/download-artifact@v3"
        with:
          name: "packages"
          path: "./build/release/"
      - name: "Copy .exe and license to installer dir"
        run: |
          copy build\release\husarnet-daemon-windows-win64.exe platforms\windows\husarnet-daemon.exe
          copy build\release\husarnet-windows-win64.exe platforms\windows\husarnet.exe
          copy LICENSE.txt platforms\windows
        shell: "cmd"
      - name: "Building the installer"
        run: |
          "%programfiles(x86)%\Inno Setup 6\iscc.exe" platforms\windows\script.iss
          copy platforms\windows\Output\husarnet-setup.exe build\release\husarnet-setup.exe
        shell: "cmd"
      - name: "Push artifacts"
        uses: "actions/upload-artifact@v3"
        with:
          if-no-files-found: "error"
          name: "packages"
          path: "./build/release/*setup*"
  bump_version:
    needs: []
    outputs:
      commit_ref: "${{ steps.autocommit.outputs.commit_hash }}"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          ref: "master"
      - uses: "actions/setup-python@v4"
        with:
          python-version: "3.x"
      - name: "Bump version"
        run: "python ./util/version-bump.py"
      - name: "Read new version"
        run: "echo \"VERSION=$(cat version.txt)\" >> $GITHUB_ENV"
      - id: "autocommit"
        uses: "stefanzweifel/git-auto-commit-action@v4"
        with:
          commit_message: "Build version ${{ env.VERSION }}"
  release_docker_nightly:
    needs:
      - "run_tests"
      - "run_integration_tests"
      - "build_docker"
      - "bump_version"
      - "build_builder"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          ref: "${{ needs.bump_version.outputs.commit_ref }}"
      - name: "Login to Docker Registry"
        uses: "docker/login-action@v2"
        with:
          password: "${{ secrets.HNETUSER_DOCKERHUB_PASSWORD }}"
          registry: "docker.io"
          username: "${{ secrets.HNETUSER_DOCKERHUB_LOGIN }}"
      - name: "create manifest"
        run: |
          docker manifest create husarnet/husarnet-nightly:latest \
          --amend husarnet/husarnet-nightly:amd64 \
          --amend husarnet/husarnet-nightly:arm64 \
          --amend husarnet/husarnet-nightly:armhf
          
          docker manifest create husarnet/husarnet-nightly:$(cat version.txt) \
          --amend husarnet/husarnet-nightly:amd64 \
          --amend husarnet/husarnet-nightly:arm64 \
          --amend husarnet/husarnet-nightly:armhf
      - name: "push manifest"
        run: |
          docker manifest push husarnet/husarnet-nightly:latest
          docker manifest push husarnet/husarnet-nightly:$(cat version.txt)
  release_nightly:
    needs:
      - "run_tests"
      - "run_integration_tests"
      - "build_unix"
      - "build_macos_natively"
      - "build_windows_installer"
      - "bump_version"
      - "build_builder"
    runs-on:
      - "self-hosted"
      - "linux"
      - "nightly"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          ref: "${{ needs.bump_version.outputs.commit_ref }}"
      - name: "Pull artifacts"
        uses: "actions/download-artifact@v3"
        with:
          name: "packages"
          path: "./build/release/"
      - name: "Deploy to Husarnet nightly repository"
        run: "./deploy/deploy.sh nightly"
  run_integration_tests:
    needs:
      - "build_unix"
      - "build_docker"
      - "bump_version"
      - "build_builder"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          ref: "${{ needs.bump_version.outputs.commit_ref }}"
      - name: "Pull artifacts"
        uses: "actions/download-artifact@v3"
        with:
          name: "packages"
          path: "./build/release/"
      - name: "Login to GHCR"
        uses: "docker/login-action@v2"
        with:
          password: "${{ secrets.GITHUB_TOKEN }}"
          registry: "ghcr.io"
          username: "${{ github.actor }}"
      - name: "Login to Docker Registry"
        uses: "docker/login-action@v2"
        with:
          password: "${{ secrets.HNETUSER_DOCKERHUB_PASSWORD }}"
          registry: "docker.io"
          username: "${{ secrets.HNETUSER_DOCKERHUB_LOGIN }}"
      - name: "Save a password for unlocking a shared secrets repository in a known place"
        run: "echo '${{ secrets.SHARED_SECRETS_PASSWORD }}' > tests/integration/secrets-password.bin"
      - name: "Docker run ${{matrix.container_name}} /app/tests/integration/runner.sh ${{matrix.test_platform}} ${{matrix.test_file}}"
        run: "docker run --rm --privileged --volume $(pwd):/app ${{matrix.container_name}} /app/tests/integration/runner.sh ${{matrix.test_platform}} ${{matrix.test_file}}"
    strategy:
      fail-fast: false
      matrix:
        container_name:
          - "husarnet/husarnet-nightly:amd64"
          - "ubuntu:18.04"
          - "ubuntu:20.04"
          - "ubuntu:22.04"
          - "debian:oldstable"
          - "debian:stable"
          - "debian:testing"
          - "fedora:37"
          - "fedora:38"
        include:
          - container_name: "husarnet/husarnet-nightly:amd64"
            test_platform: "docker"
          - container_name: "ubuntu:18.04"
            test_platform: "ubuntu_debian"
          - container_name: "ubuntu:20.04"
            test_platform: "ubuntu_debian"
          - container_name: "ubuntu:22.04"
            test_platform: "ubuntu_debian"
          - container_name: "debian:oldstable"
            test_platform: "ubuntu_debian"
          - container_name: "debian:stable"
            test_platform: "ubuntu_debian"
          - container_name: "debian:testing"
            test_platform: "ubuntu_debian"
          - container_name: "fedora:37"
            test_platform: "fedora"
          - container_name: "fedora:38"
            test_platform: "fedora"
        test_file:
          - "functional-basic"
          - "join-workflow"
  run_tests:
    needs:
      - "bump_version"
      - "build_builder"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          ref: "${{ needs.bump_version.outputs.commit_ref }}"
      - name: "Login to GHCR"
        uses: "docker/login-action@v2"
        with:
          password: "${{ secrets.GITHUB_TOKEN }}"
          registry: "ghcr.io"
          username: "${{ github.actor }}"
      - name: "Docker run ghcr.io/husarnet/husarnet:builder /app/daemon/format.sh"
        run: "docker run --rm --privileged --volume $(pwd):/app ghcr.io/husarnet/husarnet:builder /app/daemon/format.sh"
      - name: "Docker run ghcr.io/husarnet/husarnet:builder /app/tests/test.sh"
        run: "docker run --rm --privileged --volume $(pwd):/app ghcr.io/husarnet/husarnet:builder /app/tests/test.sh"
name: "Release nightly"
"on":
  push:
    branches:
      - "master"
  workflow_dispatch: {}
