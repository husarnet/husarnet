name: Release nightly

on:
  push:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  bump_version:
    runs-on: ubuntu-latest

    outputs:
      commit_ref: ${{ steps.push.outputs.commit_ref }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Bump version
        run: python ./util/version-bump.py

      - name: Push version bump
        id: push
        run: |
          git config --global user.name 'Husarnet CI man'
          git config --global user.email 'szymon.niemiec@husarnet.com'
          git commit -am "Automatic version bump"
          git push
          echo "::set-output name=commit_ref::$(git rev-parse HEAD)"

  build_unix:
    needs: bump_version

    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [amd64, i386, arm64, armhf, riscv64]

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump_version.outputs.commit_ref }}

      - name: Use the value
        id: step_two
        run: |
          echo "${{ env.commit_ref }}" # This will output 'yellow'

      - name: Prepare build
        run: ./util/build-prepare.sh

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.18"

      - name: Build C++
        run: |
          ./util/build-cmake.sh ${{matrix.arch}} unix

      - name: Build CLI
        run: ./util/build-cli.sh ${{matrix.arch}} unix

      - name: Build tar
        run: ./util/package-unix.sh ${{matrix.arch}} tar

      - name: Build deb
        run: ./util/package-unix.sh ${{matrix.arch}} deb

      - name: Build rpm
        run: ./util/package-unix.sh ${{matrix.arch}} rpm

      - name: Save artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ./build/release/
          if-no-files-found: error

  build_windows:
    needs: bump_version

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump_version.outputs.commit_ref }}

      - name: Prepare build
        run: ./util/build-prepare.sh

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.18"

      - name: Build C++
        run: ./util/build-cmake.sh win64 windows

      - name: Build CLI
        run: ./util/build-cli.sh win64 windows

      - name: Save artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ./build/release/
          if-no-files-found: error

  build_windows_installer:
    needs: build_windows

    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump_version.outputs.commit_ref }}

      - name: Fetch artifacts
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: Copy .exe and license to installer dir
        run: |
          copy husarnet-daemon-windows-win64.exe platforms\windows\husarnet-daemon.exe
          copy husarnet-windows-win64.exe platforms\windows\husarnet.exe
          copy LICENSE.txt platforms\windows
        shell: cmd

      - name: Building the installer
        run: |
          "%programfiles(x86)%\Inno Setup 6\iscc.exe" platforms\windows\script.iss
        shell: cmd

      - name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          name: windows_installer
          path: platforms\windows\Output\husarnet-setup.exe

  test:
    needs: bump_version

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump_version.outputs.commit_ref }}

      - name: Prepare tests
        run: ./util/test-prepare.sh

      - name: Build UTs
        run: ./util/test-unit-build.sh

      - name: Run UTs
        run: ./util/test-unit-run.sh

      # - name: Run static analysis (cppcheck)
      #   run: ./util/test-cppcheck.sh

  release_nightly:
    needs: [bump_version, test, build_unix, build_windows_installer]

    runs-on: [self-hosted, linux, nightly]

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump_version.outputs.commit_ref }}

      - name: Fetch artifacts
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: Fetch Windows installer
        uses: actions/download-artifact@v3
        with:
          name: windows_installer

      - name: Deploy to Husarnet nightly repository
        run: ./util/deploy.sh nightly

  build_docker:
    needs: bump_version

    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - arch: linux/amd64
            arch_alias: amd64
          - arch: linux/arm64/v8
            arch_alias: arm64
          - arch: linux/arm/v7
            arch_alias: armhf

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump_version.outputs.commit_ref }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.HNETUSER_DOCKERHUB_LOGIN }}
          password: ${{ secrets.HNETUSER_DOCKERHUB_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./platforms/docker/Dockerfile
          platforms: ${{matrix.arch}}
          push: true
          tags: husarnet/husarnet-nightly:${{matrix.arch_alias}}

  release_docker:
    needs: [test, build_docker]

    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.HNETUSER_DOCKERHUB_LOGIN }}
          password: ${{ secrets.HNETUSER_DOCKERHUB_PASSWORD }}

      - name: create manifest
        run: >
          docker manifest create husarnet/husarnet-nightly:latest
          --amend husarnet/husarnet-nightly:amd64
          --amend husarnet/husarnet-nightly:arm64
          --amend husarnet/husarnet-nightly:armhf

      - name: push manifest
        run: docker manifest push husarnet/husarnet-nightly:latest
